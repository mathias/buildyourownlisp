; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definitions
(def {fun} (\ {f b} {
  def (head f) (\ (tail f) b)
}))

(def {defun} fun)

; Unpack List for Function
(fun {unpack f l} {
  eval (join (list f) l)
})

; Pack List for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; perform several things in sequence
(defun {do & l} {
  if (== l nil)
     {nil}
     {last l}
})

; open new scope
(defun {let b} {
  ((\ {_} b) ())
})

;; example:
;; let {do (= {x} 100) (x)}
;; => 100
;; x
;; => Error: Unbound Symbol 'x'

; Logical functions
(defun {not x} {! x})
(defun {or x y} {|| x y})
(defun {and x y} {&& x y})

; Misc
(defun {flip f a b} {f b a})
(defun {ghost & xs} {eval xs})
(defun {comp f g x} {f (g x)})

; List functions
; First, second or third item in list
(defun {first l} { eval (head l) })
(defun {second l} { eval (head (tail l)) })
(defun {third l} { eval (head (tail (tail l))) })

; List length (recursive)
(defun {length l} {
  if (== l nil)
     {0}
     {+ 1 (length (tail l))}
})

; nth item
(defun {nth n l} {
  if (== n 0)
     {first l}
     {nth (- n 1) (tail l)}
})

; last item in list
(defun {last l} {nth (- (length l) 1) l})

; take n items
(defun {take n l} {
  if (== n 0)
     {nil}
     {join (head l) (take (- n 1) (tail l))}
})

; drop n items
(defun {drop n l} {
  if (== n 0)
     {l}
     {drop (- n 1) (tail l)}
})

; split at N
(defun {split n l} {
  list (take n l) (drop n l)
})

; apply function to list
(defun {map f l} {
  if (== l nil)
     {nil}
     {join (list (f (first l))) (map f (tail l))}
})

; apply filter to list
(defun {filter f l} {
  if (== l nil)
     {nil}
     {join (if (f (first l)) {head l} {nil}) (filter f (tail l))}
})

; fold left
(defun {foldl f z l} {
  if (== l nil)
     {z}
     {foldl f (f z (first l)) (tail l)}
})

(defun {sum l} {foldl + 0 l})
(defun {product l} {foldl * 1 l})

; conditional functions
(defun {select & cs} {
  if (== cs nil)
     {error "No selection found"}
     {if (first (first cs))
         {second (first (cs))}
         {unpack select (tail cs)}}
})

(def {otherwise} true)

;; Example:
;; Print day of month suffix:
(defun {month-day-suffix i} {
  select
    {(== i 0) "st"}
    {(== i 2) "nd"}
    {(== i 3) "rd"}
    {otherwise "th"}
})

;; case function
(defun {case x & cs} {
  if (== cs nil)
    {error "No Case Found"}
    {if (== x (fst (fst cs))) {snd (fst cs)} {
      unpack case (join (list x) (tail cs))}}
})

;; Example: day name function
(defun {day-name x} {
  case x
    {0 "Monday"}
    {1 "Tuesday"}
    {2 "Wednesday"}
    {3 "Thursday"}
    {4 "Friday"}
    {5 "Saturday"}
    {6 "Sunday"}
})

; fibonacci
(defun {fib n} {
  select
    { (== n 0) {0} }
    { (== n 1) {1} }
    { otherwise {+ (fib (- n 1)) (fib (- n 2))} }
})
