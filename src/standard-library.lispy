; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definitions
(def {fun} (\ {f b} {
  def (head f) (\ (tail f) b)
}))

(def {defun} fun)

; Unpack List for Function
(fun {unpack f l} {
  eval (join (list f) l)
})

; Pack List for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; perform several things in sequence
(defun {do & l} {
  if (== l nil)
     {nil}
     {last l}
})

; open new scope
(defun {let b} {
  ((\ {_} b) ())
})

;; example:
;; let {do (= {x} 100) (x)}
;; => 100
;; x
;; => Error: Unbound Symbol 'x'

; Logical functions
(defun {not x} {! x})
(defun {or x y} {|| x y})
(defun {and x y} {&& x y})

; Misc
(defun {flip f a b} {f b a})
(defun {ghost & xs} {eval xs})
(defun {comp f g x} {f (g x)})

; List functions
; First, second or third item in list
(defun {first l} { eval (head l) })
(defun {second l} { eval (head (tail l)) })
(defun {third l} { eval (head (tail (tail l))) })

; List length (recursive)
(defun {length l} {
  if (== l nil)
     {0}
     {+ 1 (length (tail l))}
})

; nth item
(defun {nth n l} {
  if (== n 0)
     {first l}
     {nth (- n 1) (tail l)}
})

; last item in list
(defun {last l} {nth (- (length l) 1) l})

; take n items
(defun {take n l} {
  if (== n 0)
     {nil}
     {join (head l) (take (- n 1) (tail l))}
})



